name: 🚀 Deploy
description: Deploys a website to Firebase Hosting
inputs:
  identity-provider:
    description: Identity Provider
    required: true
  service-account-email:
    description: Service Account Email
    required: true
  project-id:
    description: Project ID or alias. This also sets the firebase environment (https://firebase.google.com/docs/functions/config-env).
    required: true
  preview:
    description: Determines if firebase deploys to a preview channel
    required: false
    default: 'no'
  prebuild-command:
    description: The command run before the app is built
    required: false
  build-command:
    description: The command used to build the app
    required: true
  repo-token:
    description: GitHub token (e.g. secrets.GITHUB_TOKEN). This is only required if preview == 'yes' or if you are passing a value to service-now-system-id.
    required: false
  service-now-instance:
    description: the sub address to https://{service-now-instance}.service-now.com
    required: false
  service-now-table:
    description: the parent table name to write to
    required: false
  service-now-system-id:
    description: the child record id to write to
    required: false
  service-now-username:
    description: the service account name
    required: false
  service-now-password:
    description: the service account password
    required: false
  working-directory:
    description: The directory to run the build command in
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - name: ⬇️ Set up code
      uses: actions/checkout@v4
      with:
          show-progress: false

    - name: ❓ Determine Package Manager
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      id: package-manager
      run: |
        if [ -f pnpm-lock.yaml ]; then
          echo "Using PNPM"
          echo "name=pnpm" >> $GITHUB_OUTPUT
        else
          echo "Using NPM"
          echo "name=npm" >> $GITHUB_OUTPUT
        fi

    - name: 📦 Setup PNPM
      if: steps.package-manager.outputs.name == 'pnpm'
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: ${{ steps.package-manager.outputs.name }}
        cache-dependency-path: ${{ inputs.working-directory }}

    - name: 📥 Download dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ steps.package-manager.outputs.name }} install

    - name: 👥 Copy ArcGIS assets
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ steps.package-manager.outputs.name }} run --if-present copy:arcgis

    - name: 🗝️ Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        access_token_scopes: 'email, openid, https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/firebase'
        workload_identity_provider: ${{ inputs.identity-provider }}
        service_account: ${{ inputs.service-account-email }}
        create_credentials_file: true

    - name: 🍳 Run prebuild command
      if: inputs.prebuild-command != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ inputs.prebuild-command }}

    - name: 🏗 Run build command
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ inputs.build-command }}

    - name: 🦤 Cache bower
      uses: actions/cache@v4
      with:
        path: ~/.cache/bower
        key: ${{ runner.OS }}-bower-${{ hashFiles('bower.json') }}
        restore-keys: |
          ${{ runner.OS }}-bower-
          ${{ runner.OS }}

    - name: ❓ Determining if preview should be created
      id: should-create-preview
      if: inputs.preview == 'yes'
      shell: bash
      run: echo "deploy=yes" >> $GITHUB_OUTPUT

    - name: 🚀 Firebase deploy preview
      id: deploy
      if: steps.should-create-preview.outputs.deploy == 'yes'
      shell: 'script --return --quiet --command "bash {0}"'
      working-directory: ${{ inputs.working-directory }}
      run: |
        RESULTS=$(npx firebase-tools hosting:channel:deploy $GITHUB_HEAD_REF \
        --expires 14d \
        --project ${{ inputs.project-id }} \
        --json | tee /dev/tty)
        echo "url=$(echo $RESULTS | jq --raw-output '.result | .[] | .url' | tr '\n' ' | ')" >> $GITHUB_OUTPUT
        echo "expires=$(echo $RESULTS | jq '.result | .[] | .expireTime' | tr '\n' ' | ')" >> $GITHUB_OUTPUT

    - name: 🚀 Firebase deploy
      shell: bash
      if: inputs.preview != 'yes'
      working-directory: ${{ inputs.working-directory }}
      run: >
        npx firebase-tools deploy
        --project ${{ inputs.project-id }}

    - name: 🔔 Publish deployment worknote
      uses: agrc/service-now-worknote-action@v1
      if: inputs.service-now-system-id != '' && inputs.preview != 'yes'
      with:
        repo-token: ${{ inputs.repo-token }}
        username: ${{ inputs.service-now-username }}
        password: ${{ inputs.service-now-password }}
        instance-name: ${{ inputs.service-now-instance }}
        table-name: ${{ inputs.service-now-table }}
        system-id: ${{ inputs.service-now-system-id }}

    - name: 🔍 Find preview comment
      id: find-comment
      uses: peter-evans/find-comment@v3
      if: steps.should-create-preview.outputs.deploy == 'yes'
      with:
        issue-number: ${{ github.event.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Visit the preview URL for this PR

    - name: 💬 Post preview comment
      uses: peter-evans/create-or-update-comment@v4
      if: steps.should-create-preview.outputs.deploy == 'yes'
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.number }}
        body: |
          Visit the preview URL for this PR (updated for commit ${{ github.sha }}):
          Firebase Preview: ${{ steps.deploy.outputs.url }}
          <sub>(expires ${{ steps.deploy.outputs.expires }})</sub>
        edit-mode: replace
        token: ${{ inputs.repo-token }}
